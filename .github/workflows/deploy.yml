name: Deploy Node.js application to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install backend dependencies
      run: npm install
      working-directory: ./backend

    - name: Build backend application
      run: npm run build
      working-directory: ./backend

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          export FIREBASE_TYPE="${{ secrets.FIREBASE_TYPE }}"
          export FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}"
          export FIREBASE_PRIVATE_KEY_ID="${{ secrets.FIREBASE_PRIVATE_KEY_ID }}"
          export FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
          export FIREBASE_CLIENT_EMAIL="${{ secrets.FIREBASE_CLIENT_EMAIL }}"
          export FIREBASE_CLIENT_ID="${{ secrets.FIREBASE_CLIENT_ID }}"
          export FIREBASE_AUTH_URI="${{ secrets.FIREBASE_AUTH_URI }}"
          export FIREBASE_TOKEN_URI="${{ secrets.FIREBASE_TOKEN_URI }}"
          export FIREBASE_AUTH_PROVIDER_X509_CERT_URL="${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}"
          export FIREBASE_CLIENT_X509_CERT_URL="${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}"
          export FIREBASE_UNIVERSE_DOMAIN="${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"

          export PORT="${{ secrets.PORT }}"
          export NODE_ENV="${{ secrets.NODE_ENV }}"
          export LOG_LEVEL="${{ secrets.LOG_LEVEL }}"
          export LOG_FILE="${{ secrets.LOG_FILE }}"
          export CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}"
          export RATE_LIMIT_WINDOW_MS="${{ secrets.RATE_LIMIT_WINDOW_MS }}"
          export RATE_LIMIT_MAX_REQUESTS="${{ secrets.RATE_LIMIT_MAX_REQUESTS }}"
          export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          export GOOGLE_REDIRECT_URI="${{ secrets.GOOGLE_REDIRECT_URI }}"
          export GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

          cd /home/ubuntu/

          if [ ! -d "back_schedule_planner" ]; then
            git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/seominji58/back_schedule_planner.git
          else
            cd back_schedule_planner
            git pull origin main
          fi

          cd /home/ubuntu/back_schedule_planner/backend

          npm install

          pm2 list | grep "schedule-planner-backend"
          if [ $? -eq 0 ]; then
            pm2 restart schedule-planner-backend --update-env
          else
            pm2 start dist/server.js --name schedule-planner-backend --env production
          fi

          pm2 save
