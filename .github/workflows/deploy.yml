name: Deploy Node.js application to EC2

on:
  push:
    branches:
      - main # main 브랜치에 push 될 때마다 워크플로우 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22' # EC2에 설치된 Node.js 버전과 일치시키세요 (v22.17.1 이므로 22로 설정해도 됩니다.)

    - name: Install dependencies
      run: npm install

    - name: Build application (if applicable)
      run: npm run build # Next.js, React 등 빌드 과정이 있다면 사용, 없으면 삭제

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: 44.212.4.6 # EC2 인스턴스의 퍼블릭 IP 주소
        username: ubuntu # EC2 사용자 이름 (예: ubuntu)
        key: ${{ secrets.EC2_SSH_KEY }} # GitHub Secrets에 저장한 Private Key
        script: |
          # EC2 서버에서 실행될 명령어들
          cd /home/ubuntu/ # EC2에 배포할 프로젝트의 상위 디렉토리
          # 기존 프로젝트 디렉토리가 있다면 삭제 (선택 사항, 필요에 따라)
          # rm -rf <YOUR_REPOSITORY_NAME> 

          # GitHub에서 프로젝트 클론 (처음 배포 시) 또는 풀 (이후 배포 시)
          if [ ! -d "back_schedule_planner" ]; then
            git clone git@github.com:seominji58/back_schedule_planner.git
          else
            cd <YOUR_REPOSITORY_NAME>
            git pull origin main
          fi

          # 프로젝트 디렉토리로 이동
          cd /home/ubuntu/back_schedule_planner

          # Node.js 의존성 설치
          npm install

          # PM2를 사용하여 애플리케이션 재시작 또는 시작
          # PM2 설정이 없다면 새로 시작하고, 있다면 재시작
          pm2 list | grep "schedule-planner-backend"은 실제 앱 이름으로 변경
          if [ $? -eq 0 ]; then
            pm2 restart schedule-planner-backend 은 실제 앱 이름으로 변경
          else
            # Node.js 애플리케이션의 시작 스크립트에 따라 변경 (예: app.js, index.js 등)
            pm2 start dist/server.js --name schedule-planner-backend # 'app.js'와 'your-app-name'은 실제 파일명과 앱 이름으로 변경
          fi

          # PM2 프로세스 목록 저장 (재부팅 시 자동 실행을 위해)
          pm2 save
